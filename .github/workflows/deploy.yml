name: CI/CD Deployment

on:
  push:
    branches:
      - main  # Passe an deinen Stamm-Branch an (z. B. master)

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Repository auschecken
        uses: actions/checkout@v3

      - name: SSH-Agent starten
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Build & Deployment auf Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e

            APP_DIR=~/webapp

            echo ">>> Prüfe ob Docker, GIT installiert sind..."
            if ! command -v docker &> /dev/null; then
              echo ">>> Installiere Docker..."
              sudo apt-get update
              sudo apt-get install -y docker.io git
              sudo systemctl enable docker
              sudo systemctl start docker
            fi


            echo ">>> Prüfe ob Docker Compose installiert ist..."
            if ! command -v docker-compose &> /dev/null; then
              echo ">>> Installiere Docker Compose..."
              sudo apt-get install -y docker-compose || true
              # Falls obiges Paket nicht existiert, die Binary-Methode:
              if ! command -v docker-compose &> /dev/null; then
                sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-\$(uname -s)-\$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
              fi
            fi

            # Falls Verzeichnis noch kein Git-Repo ist: klonen
            if [ ! -d "$APP_DIR/.git" ]; then
              rm -rf $APP_DIR
              git clone https://github.com/${{ github.repository }} $APP_DIR
            fi

            cd $APP_DIR
            git fetch origin main
            git reset --hard origin/main

            # Image bauen, Container ersetzen
            docker build -t webapp:latest .
            docker stop webapp-container || true
            docker rm webapp-container || true
            docker run -d -p 80:80 --name webapp-container webapp:latest
          EOF
